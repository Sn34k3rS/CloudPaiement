{"version":3,"sources":["components/Home/Home.js","components/Payment/Payment.js","components/EndPayment/Success.js","components/EndPayment/Error.js","config/dev.js","components/App/App.js","index.js"],"names":["Home","href","to","Payment","history","useHistory","useState","paymentMethod","setPaymentMethod","amount","setAmount","name","setName","email","setEmail","phone","setPhone","address","setAddress","isProcessing","setIsProcessing","checkoutError","setCheckoutError","stripe","useStripe","element","useElements","paymentIntent","e","a","preventDefault","cardElement","getElement","billingInfo","line1","data","receipt_email","axios","post","createPaymentMethod","type","card","billing_details","paymentMethodObj","error","message","confirmCardPayment","payment_method","id","confirmPayment","push","onSubmit","htmlFor","onChange","target","value","required","min","options","hidePostalCode","style","base","fontSize","console","log","disabled","Success","Error","Keys","publishableKey","stripePromise","loadStripe","App","className","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82ef32ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div>\r\n            <h1>Accueil</h1>\r\n            <p>\r\n                Bonjour, veuillez cliquer sur suivant pour commencer à échanger avec votre carte bancaire.\r\n                Sachez que ce site est juste le support de <strong>Cloud Pay</strong> pour récupérer votre argent via Carte Bancaire, ainsi après votre transaction\r\n                il vous faudra vous rendre sur notre <a href={\"/#\"}>Discord</a> pour continuer votre échange.\r\n            </p>\r\n            <Link to=\"/pay\">\r\n                <button>Commencer</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Payment = () => {\r\n\r\n    let history = useHistory();\r\n    const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n    const [amount, setAmount] = useState(0);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(0);\r\n    const [address, setAddress] = useState(\"\")\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [checkoutError, setCheckoutError] = useState(\"\");\r\n    const stripe = useStripe();\r\n    const element = useElements();\r\n\r\n    const selectHandler = (e) => {\r\n        setPaymentMethod(e.target.value);\r\n    };\r\n    const amountHandler = (e) => {\r\n        setAmount(e.target.value);\r\n    };\r\n    const nameHandler = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n    const emailHandler = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n    const phoneHandler = (e) => {\r\n        setPhone(e.target.value);\r\n    };\r\n    const addressHandler = (e) => {\r\n        setAddress(e.target.value);\r\n    };\r\n    const cardHandler = (e) => {\r\n\r\n        if (e.error) {\r\n            console.log(e.error.message)\r\n            setCheckoutError(e.error.message);\r\n        } else {\r\n            setCheckoutError(\"\");\r\n        }\r\n\r\n    };\r\n\r\n    const paymentIntent = async (e) => {\r\n        e.preventDefault();\r\n        setIsProcessing(true);\r\n\r\n        const cardElement = element.getElement(\"card\");\r\n\r\n        const billingInfo = {\r\n            name: name,\r\n            phone: phone,\r\n            email: email,\r\n            address: {\r\n                line1: address,\r\n            },\r\n        };\r\n        let data = {\r\n            amount: amount,\r\n            paymentMethod: paymentMethod,\r\n            receipt_email: email,\r\n        };\r\n\r\n        try {\r\n            const paymentIntent = await axios.post('/pay', data);\r\n            const paymentMethodObj = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: cardElement,\r\n                billing_details: billingInfo,\r\n            });\r\n            if (paymentMethodObj.error) {\r\n                setCheckoutError(paymentMethodObj.error.message);\r\n                setIsProcessing(false);\r\n                return\r\n            };\r\n            const confirmPayment = await stripe.confirmCardPayment(paymentIntent.data, {\r\n                payment_method: paymentMethodObj.paymentMethod.id,\r\n            });\r\n            if (confirmPayment.error) {\r\n                setCheckoutError(confirmPayment.error.message);\r\n                setIsProcessing(false);\r\n                return\r\n            };\r\n\r\n            if (confirmPayment) {\r\n                history.push('/pay/success')\r\n            }\r\n        } catch (err) {\r\n            setCheckoutError(err.message);\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <h1>Information sur votre transaction</h1>\r\n            <h3>Choix de la transaction</h3>\r\n\r\n            <form onSubmit={paymentIntent}>\r\n                <div>\r\n                    <label htmlFor=\"name\">Nom: </label>\r\n                    <input id=\"name\" type=\"text\" name=\"name\" onChange={nameHandler} required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"email\">Email: </label>\r\n                    <input id=\"email\" type=\"email\" name=\"email\" onChange={emailHandler} required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"phone\">Téléphone: </label>\r\n                    <input id=\"phone\" type=\"number\" name=\"phone\" onChange={phoneHandler} required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"address\">Adresse: </label>\r\n                    <input id=\"address\" type=\"text\" name=\"address\" onChange={addressHandler} required/>\r\n                </div>\r\n                <select onChange={selectHandler} name={\"PaymentMethod\"}>\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"paypal\">Vers PayPal</option>\r\n                    <option value=\"bitcoin\">Vers Bitcoin</option>\r\n                    <option value=\"vcc\">Vers VCC</option>\r\n                </select>\r\n                <p>\r\n                    Dans la partie suivante, veuillez préciser le montant que vous souhaitez convertir.\r\n                    Ecrivez la somme tout attaché (ex: 20€ -> 2000, 0.99€ -> 0099).\r\n                    Les taxes qui sont appliquées sont sur notre <a href={\"/#\"}>Discord</a>\r\n                </p>\r\n                <div>\r\n                    <label htmlFor=\"amount\">Montant: </label>\r\n                    <input id=\"amount\" type=\"number\" name=\"amount\" min=\"10\" onChange={amountHandler} required/>\r\n                </div>\r\n                <h6>{checkoutError}</h6>\r\n                <CardElement\r\n                    options={{\r\n                        hidePostalCode: true,\r\n                        style:{\r\n                            base:{\r\n                                fontSize: '20px'\r\n                            }\r\n                        }\r\n                    }}\r\n                    onChange={cardHandler}\r\n                />\r\n                <button type=\"submit\" disabled={isProcessing}>{isProcessing ? \"Paiment ...\" : \"Payer\"}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Payment;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Success = () => {\r\n    return(\r\n        <div>\r\n            <h1>Bravo</h1>\r\n            <p>\r\n                Bravo, votre transaction a bien été reçu. Nous tenons à vous remercier de la confiance que vous accordez à <strong>Cloud Pay</strong> <br/>\r\n                Veuillez à présent vous rendre sur notre <a href=\"/#\">Serveur Discord</a> pour continuer. <br/>\r\n                Toute notre équipe se tiens à votre disposition pour répondre à toutes vos questions. <br/>\r\n            </p>\r\n            <Link to={\"/\"}>\r\n                <button>Retour Accueil</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Success;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Error = () => {\r\n    return(\r\n        <div>\r\n            <h1>Erreur</h1>\r\n            <p>\r\n                Désolé, votre transaction a eu un problème. Nous tenons à nous excuser de cette gène occasionnée <br/>\r\n                N'hésitez pas à retenter votre transaction ou contactez notre équipe sur <a href=\"/#\">Discord</a> <br/>\r\n                Toute notre équipe se tiens à votre disposition pour répondre à toutes vos questions. <br/>\r\n            </p>\r\n            <Link to={\"/\"}>\r\n                <button>Retour Accueil</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;","const Keys = {\r\n    publishableKey: 'pk_test_51IAJbuE18ded10SPLxYKbB4RbU6nHUlt3arR32wmMvLNl13n2YzjtLjN7o3BcaSeUaF0AmRG2vaTwj9db9gZWsDZ00uiDNSU7L'\r\n}\r\n\r\nexport default Keys;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\n\n//Components\nimport Home from \"../Home/Home\";\nimport Payment from \"../Payment/Payment\";\nimport Success from '../EndPayment/Success';\nimport Error from \"../EndPayment/Error\";\n\n// Stripe\nimport {Elements} from \"@stripe/react-stripe-js\";\nimport {loadStripe} from \"@stripe/stripe-js\";\nimport Keys from \"./../../config/dev\";\nconst stripePromise = loadStripe(Keys.publishableKey);\n\nconst App = () =>{\n    return (\n        <Router>\n            <Elements\n                stripe={stripePromise}\n            >\n                <div className=\"App\">\n                    <nav>Cloud Pay</nav>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <Home/>\n                        </Route>\n                        <Route path=\"/pay\" exact>\n                            <Payment/>\n                        </Route>\n                        <Route path=\"/pay/success\" exact>\n                            <Success/>\n                        </Route>\n                        <Route path=\"/pay/error\" exact>\n                            <Error/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Elements>\n        </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}