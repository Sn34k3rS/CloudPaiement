[{"C:\\React-Node\\CloudPaiement\\client\\src\\index.js":"1","C:\\React-Node\\CloudPaiement\\client\\src\\components\\App\\App.js":"2","C:\\React-Node\\CloudPaiement\\client\\src\\components\\Home\\Home.js":"3","C:\\React-Node\\CloudPaiement\\client\\src\\components\\EndPayment\\Error.js":"4","C:\\React-Node\\CloudPaiement\\client\\src\\components\\Payment\\Payment.js":"5","C:\\React-Node\\CloudPaiement\\client\\src\\components\\EndPayment\\Success.js":"6","C:\\React-Node\\CloudPaiement\\client\\src\\config\\dev.js":"7"},{"size":245,"mtime":1611358749677,"results":"8","hashOfConfig":"9"},{"size":1432,"mtime":1611360799098,"results":"10","hashOfConfig":"9"},{"size":721,"mtime":1611358749673,"results":"11","hashOfConfig":"9"},{"size":698,"mtime":1611358749669,"results":"12","hashOfConfig":"9"},{"size":5944,"mtime":1611358749673,"results":"13","hashOfConfig":"9"},{"size":728,"mtime":1611358749673,"results":"14","hashOfConfig":"9"},{"size":372,"mtime":1611360783213,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"oro1wy",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React-Node\\CloudPaiement\\client\\src\\index.js",[],["32","33"],"C:\\React-Node\\CloudPaiement\\client\\src\\components\\App\\App.js",[],"C:\\React-Node\\CloudPaiement\\client\\src\\components\\Home\\Home.js",[],"C:\\React-Node\\CloudPaiement\\client\\src\\components\\EndPayment\\Error.js",[],"C:\\React-Node\\CloudPaiement\\client\\src\\components\\Payment\\Payment.js",["34"],"import React, { useState } from 'react';\r\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nconst email_checker = require(\"email-verifier-node\");\r\n\r\nconst Payment = () => {\r\n\r\n    let history = useHistory();\r\n    const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n    const [amount, setAmount] = useState(0);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(0);\r\n    const [address, setAddress] = useState(\"\")\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [checkoutError, setCheckoutError] = useState(\"\");\r\n    const stripe = useStripe();\r\n    const element = useElements();\r\n\r\n    const selectHandler = (e) => {\r\n        setPaymentMethod(e.target.value);\r\n    };\r\n    const amountHandler = (e) => {\r\n        setAmount(e.target.value);\r\n    };\r\n    const nameHandler = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n    const emailHandler = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n    const phoneHandler = (e) => {\r\n        setPhone(e.target.value);\r\n    };\r\n    const addressHandler = (e) => {\r\n        setAddress(e.target.value);\r\n    };\r\n    const cardHandler = (e) => {\r\n\r\n        if (e.error) {\r\n            console.log(e.error.message)\r\n            setCheckoutError(e.error.message);\r\n        } else {\r\n            setCheckoutError(\"\");\r\n        }\r\n\r\n    };\r\n\r\n    const paymentIntent = async (e) => {\r\n        e.preventDefault();\r\n        setIsProcessing(true);\r\n/*\r\n        // Data Vérification\r\n        // Name\r\n        let typeName = typeof name;\r\n        console.log(typeName);\r\n        if (typeName !== \"string\") return console.log(\"Vous ne pouvez pas avoir de lettre dans votre nom\")\r\n        // Email\r\n        const checkedEmail = await email_checker.verify_email(`${email}`);\r\n        console.log(checkedEmail);*/\r\n\r\n\r\n        const cardElement = element.getElement(\"card\");\r\n\r\n        const billingInfo = {\r\n            name: name,\r\n            phone: phone,\r\n            email: email,\r\n            address: {\r\n                line1: address,\r\n            },\r\n        };\r\n        let data = {\r\n            amount: amount,\r\n            paymentMethod: paymentMethod,\r\n            receipt_email: email,\r\n        };\r\n\r\n        try {\r\n            const paymentIntent = await axios.post('/pay', data);\r\n            const paymentMethodObj = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: cardElement,\r\n                billing_details: billingInfo,\r\n            });\r\n            if (paymentMethodObj.error) {\r\n                setCheckoutError(paymentMethodObj.error.message);\r\n                setIsProcessing(false);\r\n                return\r\n            };\r\n            const confirmPayment = await stripe.confirmCardPayment(paymentIntent.data, {\r\n                payment_method: paymentMethodObj.paymentMethod.id,\r\n            });\r\n            if (confirmPayment.error) {\r\n                setCheckoutError(confirmPayment.error.message);\r\n                setIsProcessing(false);\r\n                return\r\n            };\r\n\r\n            if (confirmPayment) {\r\n                history.push('/pay/success')\r\n            }\r\n        } catch (err) {\r\n            setCheckoutError(err.message);\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <h1>Information sur votre transaction</h1>\r\n            <h3>Choix de la transaction</h3>\r\n\r\n            <form onSubmit={paymentIntent}>\r\n                <div>\r\n                    <label htmlFor=\"name\">Nom: </label>\r\n                    <input id=\"name\" type=\"text\" name=\"name\" onChange={nameHandler} required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"email\">Email: </label>\r\n                    <input id=\"email\" type=\"email\" name=\"email\" onChange={emailHandler} required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"phone\">Téléphone: </label>\r\n                    <input id=\"phone\" type=\"number\" name=\"phone\" onChange={phoneHandler} required/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"address\">Adresse: </label>\r\n                    <input id=\"address\" type=\"text\" name=\"address\" onChange={addressHandler} required/>\r\n                </div>\r\n                <select onChange={selectHandler} name={\"PaymentMethod\"}>\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"paypal\">Vers PayPal</option>\r\n                    <option value=\"bitcoin\">Vers Bitcoin</option>\r\n                    <option value=\"vcc\">Vers VCC</option>\r\n                </select>\r\n                <p>\r\n                    Dans la partie suivante, veuillez préciser le montant que vous souhaitez convertir.\r\n                    Ecrivez la somme tout attaché (ex: 20€ -> 2000, 0.99€ -> 0099).\r\n                    Les taxes qui sont appliquées sont sur notre <a href={\"/#\"}>Discord</a>\r\n                </p>\r\n                <div>\r\n                    <label htmlFor=\"amount\">Montant: </label>\r\n                    <input id=\"amount\" type=\"number\" name=\"amount\" min=\"10\" onChange={amountHandler} required/>\r\n                </div>\r\n                <h6>{checkoutError}</h6>\r\n                <CardElement\r\n                    options={{\r\n                        hidePostalCode: true,\r\n                        style:{\r\n                            base:{\r\n                                fontSize: '20px'\r\n                            }\r\n                        }\r\n                    }}\r\n                    onChange={cardHandler}\r\n                />\r\n                <button type=\"submit\" disabled={isProcessing}>{isProcessing ? \"Paiment ...\" : \"Payer\"}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Payment;","C:\\React-Node\\CloudPaiement\\client\\src\\components\\EndPayment\\Success.js",[],"C:\\React-Node\\CloudPaiement\\client\\src\\config\\dev.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":5,"column":7,"nodeType":"41","messageId":"42","endLine":5,"endColumn":20},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'email_checker' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]